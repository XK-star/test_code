#include "CanBusTask.h"
#include "main.h"
#include "pid.h"
#include "SuperviseTask.h"
#include "data.h"
#include "Driver_Gimbal.h"

extern PID_Regulator_t ShootMotorSpeedPID ;
extern PID_Regulator_t BulletTurntableSpeedPID ;

Measure CM1_Measure = {0, 0, 0, 0};
Measure CM2_Measure = {0, 0, 0, 0};
Measure CM3_Measure = {0, 0, 0, 0};
Measure CM4_Measure = {0, 0, 0, 0};
Measure Bullet_Measure ={0, 0, 0, 0};
Measure Turntable_Measure ={0, 0, 0, 0};
Measure LittleTurntable_Measure ={0, 0, 0, 0};
Measure GMLittlePitch_Measure = {0, 0, 0, 0};
Measure GMLittleYaw_Measure = {0, 0, 0, 0};
Measure LFriR_Measure = {0, 0, 0, 0};
Measure LFriL_Measure = {0, 0, 0, 0};
Measure FriR_Measure = {0, 0, 0, 0};
Measure FriL_Measure = {0, 0, 0, 0};

volatile Encoder GMYawEncoder = {0, 0, 0, 0, 0, 0, 0, 0, 0};
volatile Encoder GMPitchEncoder = {0, 0, 0, 0, 0, 0, 0, 0, 0};
volatile Encoder TurntableEncoder = {0, 0, 0, 0, 0, 0, 0, 0, 0};
volatile Encoder BulletEncoder = {0, 0, 0, 0, 0, 0, 0, 0, 0};

extern Gimbal_Ref_t GimbalGet;


/*处理接收数据*/
/**
  * @brief  处理编码值,将其转换为连续的角度
  * @param  msg电机由CAN回传的信息 v编码器结构体
  * @retval void
  */
void EncoderProcess(volatile Encoder *v, CanRxMsgTypeDef *msg)
{
	int i = 0;
	int32_t temp_sum = 0;
	v->last_raw_value = v->raw_value;
	v->raw_value = (msg->Data[0] << 8) | msg->Data[1];
	v->diff = v->raw_value - v->last_raw_value;
	if (v->diff < -6400) //两次编码器的反馈值差别太大，表示圈数发生了改变
	{
		v->round_cnt++;
		v->ecd_raw_rate = v->diff + 8192;
	}
	else if (v->diff > 6400)
	{
		v->round_cnt--;
		v->ecd_raw_rate = v->diff - 8192;
	}
	else
	{
		v->ecd_raw_rate = v->diff;
	}
	//计算得到连续的编码器输出值
	v->ecd_value = v->raw_value + v->round_cnt * 8192;
	//计算得到角度值，范围正负无穷大
	v->ecd_angle = (float)(v->raw_value - v->ecd_bias) * 360.0f / 8192 + v->round_cnt * 360;
	v->rate_buf[v->buf_count++] = v->ecd_raw_rate;
	if (v->buf_count == RATE_BUF_SIZE)
	{
		v->buf_count = 0;
	}	
	//计算速度平均值
	for (i = 0; i < RATE_BUF_SIZE; i++)
	{
		temp_sum += v->rate_buf[i];
	}
	v->filter_rate = (int32_t)(temp_sum / RATE_BUF_SIZE);
}

void get_measure(Measure *mea, CanRxMsgTypeDef *msg)
{
	mea->angle = (uint16_t)(msg->Data[0] << 8 | msg->Data[1]);
	mea->speed_rpm = (int16_t)(msg->Data[2] << 8 | msg->Data[3]);
	mea->real_current = (int16_t)((msg->Data[4] << 8) | (msg->Data[5]));
	mea->Temperature = msg->Data[6];
}

void Get_Assist( CanRxMsgTypeDef *msg)
{
	GimbalGet.Pitch=(uint16_t)(msg->Data[0] << 8 | msg->Data[1])/ 100.0f;
	GimbalGet.Yaw=(int16_t)(msg->Data[2] << 8 | msg->Data[3])/ 100.0f;
}


void CanReceiveMsgProcess(CanRxMsgTypeDef *msg)
{
	
	switch(msg->StdId )
	{
		case CM1_ID:
		{
			get_measure(&CM1_Measure, msg);
			ChassisFrameCounter[0]++;
		}break;
		case CM2_ID :
		{
			get_measure(&CM2_Measure, msg);
			ChassisFrameCounter[1]++;
		}break;
		case CM3_ID:
		{
			get_measure(&CM3_Measure, msg);
			ChassisFrameCounter[2]++;
		}break;
		case CM4_ID :
		{
			get_measure(&CM4_Measure, msg);
			ChassisFrameCounter[3]++;
		}break;

		case GMPitch_ID :
		{
			EncoderProcess(&GMPitchEncoder, msg);
			PitchFrameCounter++;
		}break;
		case GMYaw_ID :
		{
			EncoderProcess(&GMYawEncoder, msg);
		}break;
	 case TM_ID:
		{
				get_measure(&Turntable_Measure, msg);
				EncoderProcess(&TurntableEncoder, msg);

		}break;
		case ASSIST_ID:
		{
				Get_Assist(msg);

		}break;
  }
}

void CanReceiveMsgProcess_2(CanRxMsgTypeDef *msg)
{
	
	switch(msg->StdId )
	{
		case LFriL_ID:
		{
			get_measure(&LFriL_Measure, msg);
			
		}break;
		case LFriR_ID :
		{
			get_measure(&LFriR_Measure, msg);
		}break;
		case FriL_ID:
		{
			get_measure(&FriL_Measure, msg);
		}break;
		case FriR_ID :
		{
			get_measure(&FriR_Measure, msg);
		}break;
		case Bullet_ID:
		{
				get_measure(&Bullet_Measure, msg);
				EncoderProcess(&BulletEncoder, msg);			

		}break;
		case GMLittleYaw_ID :
		{
			get_measure(&GMLittleYaw_Measure, msg);
		}break;

	}
	
}


/*底盘*/
void Set_CM_Speed(CAN_HandleTypeDef *CANx, int16_t cm1_iq, int16_t cm2_iq, int16_t cm3_iq, int16_t cm4_iq)
{
	hcan1.pTxMsg->StdId = 0x200;
	hcan1.pTxMsg->IDE = CAN_ID_STD;
	hcan1.pTxMsg->RTR = CAN_RTR_DATA;
	hcan1.pTxMsg->DLC = 0x08;

	hcan1.pTxMsg->Data[0] = (uint8_t)(cm1_iq >> 8);
	hcan1.pTxMsg->Data[1] = (uint8_t)cm1_iq;
	hcan1.pTxMsg->Data[2] = (uint8_t)(cm2_iq >> 8);
	hcan1.pTxMsg->Data[3] = (uint8_t)cm2_iq;
	hcan1.pTxMsg->Data[4] = (uint8_t)(cm3_iq >> 8);
	hcan1.pTxMsg->Data[5] = (uint8_t)cm3_iq;
	hcan1.pTxMsg->Data[6] = (uint8_t)(cm4_iq >> 8);
	hcan1.pTxMsg->Data[7] = (uint8_t)cm4_iq;
	
	HAL_CAN_Transmit_IT(&hcan1);
	//CAN_bufferPush(&Que_CAN1_Tx, *hcan1.pTxMsg);

	
}
/*云台*/
//can1   pitch 6623   2006
uint16_t Set_Gimbal_Count;
void Set_Gimbal_Current(CAN_HandleTypeDef *CANx,int16_t gimbal_yaw_iq, int16_t gimbal_pitch_iq)
{
	Set_Gimbal_Count++;
	hcan1.pTxMsg->StdId = 0x1FF;
	hcan1.pTxMsg->IDE = CAN_ID_STD;
	hcan1.pTxMsg->RTR = CAN_RTR_DATA;
	hcan1.pTxMsg->DLC = 0x08;

	hcan1.pTxMsg->Data[0] = (unsigned char)(gimbal_yaw_iq >> 8);
	hcan1.pTxMsg->Data[1] = (unsigned char)gimbal_yaw_iq;
	hcan1.pTxMsg->Data[2] = (unsigned char)(gimbal_pitch_iq >> 8);
	hcan1.pTxMsg->Data[3] = (unsigned char)gimbal_pitch_iq;
	hcan1.pTxMsg->Data[4] = (int16_t)(ShootMotorSpeedPID.output) >> 8;
	hcan1.pTxMsg->Data[5] = (unsigned char)(ShootMotorSpeedPID.output);
	hcan1.pTxMsg->Data[6] = 0x00;// (int16_t)(BulletTurntableSpeedPID.output) >> 8;
	hcan1.pTxMsg->Data[7] = 0x00;//(unsigned char)(BulletTurntableSpeedPID.output);
	
	HAL_CAN_Transmit_IT(&hcan1);
	//CAN_bufferPush(&Que_CAN1_Tx, *hcan1.pTxMsg);

}
//CAN2 -->弹仓3508 机械臂 
void Set_Little_FriMotor(CAN_HandleTypeDef *CANx, int16_t friRight_iq,int16_t friLeft_iq,int16_t turntable_iq)
{
	HAL_StatusTypeDef status;
	hcan2.pTxMsg->StdId = 0x200;                                           
	hcan2.pTxMsg->IDE = CAN_ID_STD;
	hcan2.pTxMsg->RTR = CAN_RTR_DATA;
	hcan2.pTxMsg->DLC = 0x08;

	hcan2.pTxMsg->Data[0] =  (unsigned char)(friRight_iq >> 8);
	hcan2.pTxMsg->Data[1] = (unsigned char)(friRight_iq );
	hcan2.pTxMsg->Data[2] =  (unsigned char)(friLeft_iq >> 8);
	hcan2.pTxMsg->Data[3] =  (unsigned char)(friLeft_iq );
	hcan2.pTxMsg->Data[4] = (unsigned char)(turntable_iq >> 8);
	hcan2.pTxMsg->Data[5] = (unsigned char)(turntable_iq);
	hcan2.pTxMsg->Data[6] = 0x00;
	hcan2.pTxMsg->Data[7] = 0x00;
  
	//status=HAL_CAN_Transmit(&hcan2,1);
	HAL_CAN_Transmit_IT(&hcan2);
	__HAL_CAN_ENABLE_IT(&hcan2, CAN_IT_FOV0 | CAN_IT_FMP0 );
	
}

void Set_Little_Gimbal(CAN_HandleTypeDef *CANx,int16_t friRight_iq,int16_t friLeft_iq,int16_t gimbal_yaw_iq, int16_t gimbal_pitch_iq)
{
	HAL_StatusTypeDef status;
	hcan2.pTxMsg->StdId = 0x1ff;                                           
	hcan2.pTxMsg->IDE = CAN_ID_STD;
	hcan2.pTxMsg->RTR = CAN_RTR_DATA;
	hcan2.pTxMsg->DLC = 0x08;

	hcan2.pTxMsg->Data[0] = (unsigned char)(friRight_iq >> 8);
	hcan2.pTxMsg->Data[1] = (unsigned char)(friRight_iq);
	hcan2.pTxMsg->Data[2] = (unsigned char)(friLeft_iq >> 8);
	hcan2.pTxMsg->Data[3] = (unsigned char)(friLeft_iq );
	hcan2.pTxMsg->Data[4] = (unsigned char)(gimbal_yaw_iq >> 8);
	hcan2.pTxMsg->Data[5] = (unsigned char)gimbal_yaw_iq;
	hcan2.pTxMsg->Data[6] = (int16_t)(BulletTurntableSpeedPID.output) >> 8;
	hcan2.pTxMsg->Data[7] = (unsigned char)(BulletTurntableSpeedPID.output);
	
  
	//status=HAL_CAN_Transmit(&hcan2,1);
	HAL_CAN_Transmit_IT(&hcan2);
	__HAL_CAN_ENABLE_IT(&hcan2, CAN_IT_FOV0 | CAN_IT_FMP0 );
	
}

int16_t Master_Yaw_Send,Master_Pitch_Send;

void Contact(void)
{
	
	Master_Pitch_Send=GMPitchEncoder.ecd_angle*100;//MINIPC数据
  Master_Yaw_Send=GMYawEncoder.ecd_angle*100;
	hcan1.pTxMsg->StdId = 0x107;
	hcan1.pTxMsg->IDE = CAN_ID_STD;
	hcan1.pTxMsg->RTR = CAN_RTR_DATA;
	hcan1.pTxMsg->DLC = 0x08;

	hcan1.pTxMsg->Data[0] = (unsigned char)(Master_Pitch_Send >> 8);
	hcan1.pTxMsg->Data[1] = (unsigned char)Master_Pitch_Send;
	hcan1.pTxMsg->Data[2] = (unsigned char)(Master_Yaw_Send >> 8);
	hcan1.pTxMsg->Data[3] = (unsigned char)Master_Yaw_Send;
	hcan1.pTxMsg->Data[4] = 0x00;//(int16_t)(ShootMotorSpeedPID.output) >> 8;
	hcan1.pTxMsg->Data[5] = 0x00;//(unsigned char)(ShootMotorSpeedPID.output);
	hcan1.pTxMsg->Data[6] = 0x00;// (int16_t)(BulletTurntableSpeedPID.output) >> 8;
	hcan1.pTxMsg->Data[7] = 0x00;//(unsigned char)(BulletTurntableSpeedPID.output);
	
	HAL_CAN_Transmit_IT(&hcan1);
	
}

uint16_t testlen = 0;
void CAN_Send(void)
{
//	testlen = CAN_bufferlen(&Que_CAN1_Tx);
//	if(testlen>0)
//	{
//		static CanTxMsgTypeDef CAN1_ReadyToSend;
//		CAN_bufferPop(&Que_CAN1_Tx,&CAN1_ReadyToSend);
//		hcan1.pTxMsg=&CAN1_ReadyToSend;
//		HAL_CAN_Transmit_IT(&hcan1);
//		CAN_Send1_FrameCounter++;
//		__HAL_CAN_ENABLE_IT(&hcan1, CAN_IT_FOV0 | CAN_IT_FMP0);
//	}
}
